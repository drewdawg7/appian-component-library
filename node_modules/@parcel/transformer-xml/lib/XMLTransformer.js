"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _plugin() {
  const data = require("@parcel/plugin");
  _plugin = function () {
    return data;
  };
  return data;
}
function _xmldom() {
  const data = require("@xmldom/xmldom");
  _xmldom = function () {
    return data;
  };
  return data;
}
var atom = _interopRequireWildcard(require("./atom"));
var processingInstruction = _interopRequireWildcard(require("./processing-instruction"));
var rss = _interopRequireWildcard(require("./rss"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const HANDLERS = {
  'http://www.w3.org/2005/Atom': atom
};
const NON_NAMESPACED_HANDLERS = {
  rss
};
var _default = exports.default = new (_plugin().Transformer)({
  async transform({
    asset
  }) {
    let code = await asset.getCode();
    let parser = new (_xmldom().DOMParser)();
    let dom = parser.parseFromString(code, 'application/xml');
    let parts = [];
    let nonNamespacedHandlers = !dom.documentElement.namespaceURI ? NON_NAMESPACED_HANDLERS[dom.documentElement.nodeName] || {} : {};
    walk(dom, node => {
      var _HANDLERS$node$namesp;
      let handler = node.nodeType === node.ELEMENT_NODE ? node.namespaceURI ? (_HANDLERS$node$namesp = HANDLERS[node.namespaceURI]) === null || _HANDLERS$node$namesp === void 0 ? void 0 : _HANDLERS$node$namesp[node.localName] : nonNamespacedHandlers[node.nodeName] : node.nodeType === node.PROCESSING_INSTRUCTION_NODE ? processingInstruction[node.target] : undefined;
      if (handler) {
        handler(node, asset, parts);
      }
    });
    code = new (_xmldom().XMLSerializer)().serializeToString(dom);
    asset.setCode(code);
    return [asset, ...parts];
  }
});
function walk(element, visit) {
  visit(element);
  element = element.firstChild;
  while (element) {
    walk(element, visit);
    element = element.nextSibling;
  }
}