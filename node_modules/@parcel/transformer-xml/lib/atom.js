"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.content = content;
exports.icon = void 0;
exports.link = link;
exports.logo = void 0;
function _xmldom() {
  const data = require("@xmldom/xmldom");
  _xmldom = function () {
    return data;
  };
  return data;
}
var _utils = require("./utils");
// Handlers for elements defined by the Atom spec.
// See https://datatracker.ietf.org/doc/html/rfc4287
function link(element, asset) {
  let href = element.getAttribute('href');
  if (href) {
    href = asset.addURLDependency(href, {
      needsStableName: true
    });
    element.setAttribute('href', href);
  }
}
const icon = exports.icon = _utils.urlHandler;
const logo = exports.logo = _utils.urlHandler;
function content(element, asset, parts) {
  let type = element.getAttribute('type');
  let contents;
  switch (type) {
    case 'html':
      contents = element.textContent;
      element.textContent = '';
      break;
    case 'xhtml':
      {
        let fragment = element.ownerDocument.createDocumentFragment();
        let child;
        while (child = element.firstChild) {
          element.removeChild(child);
          fragment.appendChild(child.cloneNode(true));
        }
        contents = new (_xmldom().XMLSerializer)().serializeToString(fragment);
        break;
      }
    default:
      return;
  }
  if (contents) {
    let parcelKey = `${asset.id}:${parts.length}`;
    let el = element.ownerDocument.createElementNS('https://parceljs.org', 'inline');
    el.setAttribute('key', parcelKey);
    el.setAttribute('type', type);
    element.appendChild(el);
    asset.addDependency({
      specifier: parcelKey,
      specifierType: 'esm',
      bundleBehavior: 'inline'
    });
    parts.push({
      type,
      content: contents,
      uniqueKey: parcelKey,
      bundleBehavior: 'inline'
    });
  }
}